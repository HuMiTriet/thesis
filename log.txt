============================= test session starts ==============================
platform linux -- Python 3.10.10, pytest-7.2.1, pluggy-1.0.0
rootdir: /home/pj/coding/prototype, configfile: setup.cfg
plugins: hypothesis-6.68.2
collected 4 items / 2 deselected / 2 selected

test/test_fault_injection.py  * Serving Flask app 'proxy'
 * Debug mode: off
 * Serving Flask app 'server'
 * Debug mode: off
 * Serving Flask app 'registrar'
 * Debug mode: off
 * Serving Flask app 'client'
 * Debug mode: off
 * Serving Flask app 'client'
 * Debug mode: off
5002 resource A is being locked by http://127.0.0.1:5002/
5003 resource A is being locked by http://127.0.0.1:5003/
5002 resource A is being locked by http://127.0.0.1:5002/
5003 resource A is being locked by http://127.0.0.1:5003/
5002 resource A is being locked by http://127.0.0.1:5002/
5003 resource A is being locked by http://127.0.0.1:5003/
F.

=================================== FAILURES ===================================
_________________________ test_two_client_lock_no_reg __________________________

setup = None, register_client = None

    @fault_injection(["delay_5002_no_reg", "delay_5003_no_reg"])
>   @given(resource_id=st.sampled_from(["A", "B"]))

test/test_fault_injection.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

setup = None, register_client = None, resource_id = 'A'

    @fault_injection(["delay_5002_no_reg", "delay_5003_no_reg"])
    @given(resource_id=st.sampled_from(["A", "B"]))
    @settings(deadline=None)
    def test_two_client_lock_no_reg(
        setup,  # pyright: ignore # pylint: disable=unused-argument
        register_client,  # pyright: ignore # pylint: disable=unused-argument
        resource_id: str,
    ):
        # def test_two_client_lock(resource_id: str):
    
        client_5002_thread = RequestsThread(
            target=requests.post,
            kwargs={
                "url": f"http://127.0.0.1:5002/{resource_id}/lock/no_registrar"
            },
        )
    
        client_5003_thread = RequestsThread(
            target=requests.post,
            kwargs={
                "url": f"http://127.0.0.1:5003/{resource_id}/lock/no_registrar"
            },
        )
    
        client_5002_thread.start()
        client_5003_thread.start()
    
        r_5002: Response = client_5002_thread.join()
        r_5003: Response = client_5003_thread.join()
    
        print(f"5002 {r_5002.text}")
        print(f"5003 {r_5003.text}")
>       assert not (r_5002.status_code == 200 and r_5003.status_code == 200)
E       assert not (200 == 200 and 200 == 200)
E        +  where 200 = <Response [200]>.status_code
E        +  and   200 = <Response [200]>.status_code
E       Falsifying example: test_two_client_lock_no_reg(
E           resource_id='A',
E           setup=None,
E           register_client=None,
E       )

test/test_fault_injection.py:92: AssertionError
=========================== short test summary info ============================
FAILED test/test_fault_injection.py::test_two_client_lock_no_reg - assert not...
================== 1 failed, 1 passed, 2 deselected in 0.51s ===================
